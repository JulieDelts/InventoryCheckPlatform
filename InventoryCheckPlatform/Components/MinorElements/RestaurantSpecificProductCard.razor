@rendermode RenderMode.InteractiveServer
@inject NavigationManager NavigationManager

<div class="card">
	@if (SpecificProductAmount.SpecificProduct.FileName != null && SpecificProductAmount.SpecificProduct.FileName != "")
	{
		<img src="@CreateFullPath(SpecificProductAmount.SpecificProduct.FileName)" alt="Фото продукта" width="170" height="100">
	}
	else
	{
		<img src="Images\\SpecificProductImages\\specific-product-default.png" alt="Фото продукта" width="170" height="100">
	}
	<div class="card-body">
		<h5 class="card-title">@SpecificProductAmount.SpecificProduct.Name</h5>
		<p class=" card-text">Id: @SpecificProductAmount.SpecificProduct.Id</p>
		<p class="card-text">Поставщик: @SpecificProductAmount.SpecificProduct.Vendor </p>
		<p class="card-text">Цена: @SpecificProductAmount.SpecificProduct.Price </p>
		<p class="card-text">Количество: @SpecificProductAmount.ProductAmount</p>

		<AuthorizeView Roles="администратор ресторана">
			<Authorized>
				<div class="dropdown">
					<button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
						Опции
					</button>
					<ul class="dropdown-menu">
						<li><button class="dropdown-item" type="button" @onclick="ShowForm">Редактировать</button></li>
						<li><button class="dropdown-item" type="button" @onclick="Delete">Удалить</button></li>
					</ul>
				</div> 
			</Authorized>
		</AuthorizeView>

		<Modal @ref="_modal" UseStaticBackdrop="false" CloseOnEscape="true" />

	</div>
</div>


@code {
	[Parameter]
	[EditorRequired]
	public RestaurantSpecificProductAmountOutputModel SpecificProductAmount { get; set; }

	[Parameter]
	[EditorRequired]
	public int RestaurantId { get; set; }

	private RestaurantAdminProductManager _manager;

	private Modal _modal;

	public RestaurantSpecificProductCard()
	{
		_modal = new();

		_manager = new();
	}

	private async Task ShowForm()
	{
		RestaurantSpecificProductAmountInputModel productAmountInputModel = new()
		{
			RestaurantId = SpecificProductAmount.Restaurant.Id,
			SpecificProductId = SpecificProductAmount.SpecificProduct.Id
		};
		var parameters = new Dictionary<string, object>();
		parameters.Add("SpecificProductlWithAmount", productAmountInputModel);
		await _modal.ShowAsync<SpecificProductAmountModificationForm>(title: "Редактирование количества продукта", parameters: parameters);
	}

	public async Task Delete()
	{
		var specificProductAmount = new RestaurantSpecificProductAmountInputModel() 
		{ RestaurantId = SpecificProductAmount.Restaurant.Id, SpecificProductId = SpecificProductAmount.SpecificProduct.Id };

		await _manager.DeleteSpecificProduct(specificProductAmount);

		NavigationManager.NavigateTo($"/rest-product-menu-page/{RestaurantId}", true);
	}

	private string CreateFullPath(string relativePath)
	{
		string path = Path.Combine("Images", relativePath);
		return path;
	}
}