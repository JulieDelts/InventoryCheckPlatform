@rendermode RenderMode.InteractiveServer
@inject NavigationManager NavigationManager

<div class="card">
	@if (Product.FileName != null && Product.FileName != "")
	{
		<img src="@CreateFullPath(Product.FileName)" alt="Фото продукта" width="170" height="100">
	}
	else
	{
		<img src="Images\\BaseProductImages\\base-product-default.png" alt="Фото продукта" width="170" height="100">
	}
	<div class="card-body">
		<h5 class="card-title">@Product.Name</h5>
		<p class=" card-text">Id: @Product.Id</p>
		<p class="card-text">Категория: @Product.Category </p>

		<div class="dropdown">
			<button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
				Опции
			</button>
			<ul class="dropdown-menu">
				<li><button class="dropdown-item" type="button" @onclick="ShowForm">Редактировать</button></li>
				<li><button class="dropdown-item" type="button" @onclick="Delete">Удалить</button></li>
			</ul>
		</div>

	    <Modal @ref="_modal" UseStaticBackdrop="false" CloseOnEscape="true"/>

	</div>
</div>


@code {
	[Parameter]
	[EditorRequired]
	public BaseProductOutputModel Product { get; set; }

	private SysAdminBaseProductManager _productManager;

	private Modal _modal;

	public BaseProductCard()
	{
		_productManager = new();

		_modal = new();
	}

	private async Task ShowForm()
	{
		ExtendedBaseProductInputModel productInputModel = new() { Id = Product.Id, Category = Product.Category, Name = Product.Name };
		var parameters = new Dictionary<string, object>();
		parameters.Add("ExtendedBaseProduct", productInputModel);
		await _modal.ShowAsync<BaseProductModificationForm>(title: "Редактирование продукта", parameters: parameters);
	}

	private async Task Delete()
	{
		await _productManager.DeleteBaseProduct(Product.Id);

		NavigationManager.NavigateTo($"/base-product-menu-page", true);
	}

	private string CreateFullPath(string relativePath)
	{
		string path = Path.Combine("Images", relativePath);
		return path;
	}
}