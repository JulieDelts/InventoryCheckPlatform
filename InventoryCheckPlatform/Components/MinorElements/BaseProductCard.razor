@rendermode RenderMode.InteractiveServer
<div class="card">
	<img src="667f354d-06ee-42ed-b70b-8a749a3e2969.jpg" class="card-img-top" alt="Пицца">
	<div class="card-body">
		<h5 class="card-title">@Product.Name</h5>
		<p class=" card-text">Id: @Product.Id</p>
		<p class="card-text">Категория: @Product.Category </p>
		<Dropdown Direction="DropdownDirection.DropdownCentered">
			<DropdownToggleButton style=" width: 75px; height: 20px; font-size: 8px; font-weight: bold; font-family: Verdana; border: solid #d6b6fc; padding: 2px 1px 1px 1px; margin: 5px 5px 0 0; background: #f5f5f5">
				Опции
			</DropdownToggleButton>
			<DropdownMenu>
				<Button Type="ButtonType.Button" @onclick="ShowForm" style="font-size:10px; font-family: Verdana;">Редактировать</Button>
				<Button Type="ButtonType.Button" style="font-size:10px; font-family: Verdana;">Удалить</Button>
			</DropdownMenu>
		</Dropdown>
	</div>

	<Modal @ref="modal" UseStaticBackdrop="false" CloseOnEscape="true"/>

</div>


@code {
	[Parameter]
	[EditorRequired]
	public BasePoductOutputModel Product { get; set; }

	private Modal modal = new();

	private async Task ShowForm()
	{
		ExtendedBaseProductInputModel productInputModel = new() { Id = Product.Id, Category = Product.Category, Name = Product.Name };
		var parameters = new Dictionary<string, object>();
		parameters.Add("ExtendedBaseProduct", productInputModel);
		await modal.ShowAsync<BaseProductModificationForm>(title: "Редактирование продукта", parameters: parameters);
	}
}