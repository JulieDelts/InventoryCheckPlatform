@rendermode RenderMode.InteractiveServer
@inject IConfiguration config

    <div class="dropdown-center">
        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            Добавить
        </button>
    <ul class="dropdown-menu">
        <EditForm Model="@_specificProduct" OnValidSubmit="@Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3 text-center">
                <label class="form-label">Название:<span class="text-danger">*</span></label>
                <InputText @bind-Value="_specificProduct.Name" class="form-control" />
            </div>
            <div class="mb-3 text-center">
                <label class="form-label">Идентификатор базового продукта:<span class="text-danger">*</span></label>
                <InputNumber @bind-Value="_specificProduct.BaseProductId" class="form-control" />
            </div>
            <div class="mb-3 text-center">
                <label class="form-label">Поставщик:<span class="text-danger">*</span></label>
                <InputText @bind-Value="_specificProduct.Vendor" class="form-control" />
            </div>
            <div class="mb-3 text-center">
                <label class="form-label">Цена:<span class="text-danger">*</span></label>
                <InputNumber @bind-Value="_specificProduct.Price" class="form-control" />
            </div>
            <div class="mb-3 text-center">
                <label class="form-label">Изображение:</label>
                <InputFile OnChange="@LoadFile" accept=".png,.jpg,.jpeg" class="form-control"></InputFile>
            </div>
            <div class="row">
                <div class="col-md-14 text-center">
                    <input class="btn btn-success" type="submit" value="Подтвердить">
                    <input class="btn btn-light" type="reset" value="Сбросить" @onclick="Refresh">
                </div>
            </div>
        </EditForm>
    </ul>
</div>

@code
{
    private LogisticianProductManager _manager;

    private SpecificProductInputModel _specificProduct;

    private IBrowserFile? file;

    public SpecificProductForm()
    {
        _specificProduct = new();

        _manager = new();
    }

    private async Task Submit()
    {
        var relativePath = await CaptureFile();
        _specificProduct.FileName = relativePath;

       await _manager.AddSpecificProduct(_specificProduct);
        Refresh();
    }

    private void LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }

        string newFileName = Path.ChangeExtension(
        Path.GetRandomFileName(),
        Path.GetExtension(file.Name));

        string path = Path.Combine(config.GetValue<string>("FileStorage"), "SpecificProductImages", newFileName);

        string relativePath = Path.Combine("BaseProductImages", newFileName);

        await using FileStream fs = new(path, FileMode.Create);
        await file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 30).CopyToAsync(fs);

        return relativePath;
    }

    private void Refresh()
    {
        _specificProduct = new();  
    }
}
