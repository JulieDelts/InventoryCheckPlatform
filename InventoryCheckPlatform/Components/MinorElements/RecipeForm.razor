
@page "/recipe-form"
@rendermode RenderMode.InteractiveServer
@inject IConfiguration config
@inject NavigationManager NavigationManager

<EditForm Model="@recipeInput" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3 text-center">
        <label class="form-label">Название:<span class="text-danger">*</span></label>
        <InputText @bind-Value="recipeInput.Title" class="form-control" />
    </div>

    <div class="mb-3 text-center">
        <label class="form-label">Файл рецепта (изображение или документ):</label>
        <InputText @bind-Value="recipeInput.FileName" class="form-control" placeholder="Выберите файл" />
    </div>

    <!-- Список ингредиентов -->
    <div class="mb-3 text-center">
        <label class="form-label">Ингредиенты:</label>
        <ul>
            @foreach (var ingredient in recipeInput.Ingredients)
            {
                <li>@ingredient.Name - @ingredient.Amount</li>
            }
        </ul>
        <Dropdown Color="DropdownColor.Secondary">
            <DropdownToggleButton tabindex="@tabindex">
                Добавить ингредиент
            </DropdownToggleButton>
            <DropdownMenu>
                @foreach (var product in products)
                {
                    <DropdownItem Type="DropdownItemType.Link" @onclick="() => AddIngredient(product)">
                        @product.Name
                    </DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
    </div>
    <h3 class="mb-3 text-center">Введите количество</h3>

    <div class="mb-3 text-center">
        <InputNumber @bind-Value="InputCount" />
    </div>

    <div class="mb-3 text-center">
        <button type="submit" class="btn btn-primary">Отправить</button>
    </div>
     <div class="col-md-12 text-end">
        <Button Color="ButtonColor.Primary" @onclick="LoadRecipe">Изменить</Button>
     </div>
</EditForm>

@code {
    private RecipeInputModel recipeInput = new();
    private List<BaseProductForRecipeOutputModel> products = new();
    private BaseProductForRecipeInputModel? SelectedProduct;
    private AdminRecipeManager _productService = new();
    private int tabindex = 0;
    private int InputCount = 0;


    protected override async Task OnInitializedAsync()
    {
        products = await _productService.GetAllProductsAsync();
    }

    private void SelectProduct(BaseProductForRecipeOutputModel product)
    {
        recipeInput.SelectedProductId = product.Id;
        // SelectedProduct = product; // Обновите выбранный продукт
    }

    private void AddIngredient(BaseProductForRecipeOutputModel product)
    {

        var ingredient = new BaseProductForRecipeInputModel
            {
                Id = product.Id,
                Name = product.Name,
                Amount = InputCount.ToString()
            };


        recipeInput.Ingredients.Add(ingredient);
        InputCount = 0;
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine($"Название рецепта: {recipeInput.Title}, Файл: {recipeInput.FileName}, Ингредиенты: {string.Join(", ", recipeInput.Ingredients.Select(i => i.Name))}");
    }

    private string GetSelectedProductName()
    {
        var selectedProduct = products.FirstOrDefault(p => p.Id == recipeInput.SelectedProductId);
        return selectedProduct?.Name ?? "Выберите продукт";
    }
    private void LoadRecipe()
    {
        _productService.AddRecipeAsync(new RecipeOutputModel { Name = recipeInput.Title, 
            RecipeBaseProductAmount = recipeInput.Ingredients});
        NavigationManager.NavigateTo($"/recipes-list-page");

    }
}
