@page "/edit-recipe/{RecipeId:int}"
@attribute [StreamRendering]
@attribute [Authorize(Roles = "администратор")]
@inject NavigationManager NavigationManager
@rendermode RenderMode.InteractiveServer

<h3>изменить пользователя</h3>
<EditForm Model="recipe" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Название:</label>
        <InputText id="name" class="form-control" @bind-Value="recipe.Title" />
        <ValidationMessage For="@(() => recipe.Title)" />
    </div>  
@*     <div class="form-group">
        <label for="name">Название:</label>
        <InputText id="name" class="form-control" @bind-Value="recipe.Ingredients" />
        <ValidationMessage For="@(() => recipe.Title)" />
    </div> *@

   

    <button type="submit" class="btn btn-primary">Сохранить изменения</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Отменить</button>
</EditForm>

@code {

    [Parameter]
    public int RecipeId { get; set; }

    private RecipeOutputModel recipe = new RecipeOutputModel();

    private AdminRecipeManager recipeManager = new AdminRecipeManager();

    protected override async Task OnInitializedAsync()
    {
        recipe = await recipeManager.GetRecipeByIdAsync(RecipeId);
    }


    private void HandleValidSubmit() //(обработка )
    {

        NavigationManager.NavigateTo("/recipe-list-page");
    }

    //TO DO (не перенаправляет)
    private void Cancel()
    {

        NavigationManager.NavigateTo("/recipe-list-page");
    }
}

}
