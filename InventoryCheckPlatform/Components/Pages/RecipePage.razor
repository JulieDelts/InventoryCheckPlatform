@page "/recipes-list-page"
@attribute [StreamRendering]
@attribute [Authorize(Roles = "администратор ресторана")]
@rendermode RenderMode.InteractiveServer
@using static InventoryCheckPlatform.Components.MinorElements.CardPagination


<div class="col-md-12 text-right">
    <a href="/recipe-form">Добавить рецепт</a>
</div>

@if (_recipe.Count > 0)
{
    <div style="display:flex; justify-content: flex-start; flex-wrap:wrap;">
        @foreach (var p in _recipe)
        {
            <RecipeCard Recipe="@p" />
        }
    </div>
}
else
{
    <p>Рецептов нет</p>
}

<CardPagination ListCount="_totalRecipeCount"
                PaginationStart="_paginationStart"
                PaginationEnd="_paginationEnd"
                NumberOfItemsPerPage="_numberOfItemsPerPage"
                OnClickCallback="@SetPagination"></CardPagination>

@code
{
    private List<ShortRecipeOutputModel> _recipe = new();
    private int _totalRecipeCount;
    private int _numberOfItemsPerPage = 6;
    private int _paginationStart;
    private int _paginationEnd;
    private AdminRecipeManager _manager = new();
    protected override async Task OnInitializedAsync()
    {
        await LoadRecipes();
    }

    private async Task LoadRecipes()
    {
        var allRecipes = await _manager.GetAllRecipesShortAsync();
        _totalRecipeCount = allRecipes.Count;
        _recipe = allRecipes.Skip(_paginationStart).Take(_numberOfItemsPerPage).ToList();

        if (_totalRecipeCount < _numberOfItemsPerPage)
        {
            _paginationEnd = _totalRecipeCount - 1;
        }
        else
        {
            _paginationEnd = _numberOfItemsPerPage - 1;
        }
    }

    public void SetPagination(PaginationEventArgs e)
    {
        _paginationStart = e.PaginationStart;
        _paginationEnd = e.PaginationEnd;
        LoadRecipes();
    }
}

