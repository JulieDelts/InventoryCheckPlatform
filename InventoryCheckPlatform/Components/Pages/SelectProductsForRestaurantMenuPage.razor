@page "/select-products/{restaurantId:int}"
@attribute [StreamRendering]
@attribute [Authorize(Roles = "администратор ресторана")]
@rendermode RenderMode.InteractiveServer

<Grid TItem="SpecificProductOutputModel"
      Class="table table-hover table-bordered table-striped"
      DataProvider="ProductsDataProvider"
      AllowSorting="true"
      AllowSelection="true"
      SelectionMode="GridSelectionMode.Multiple"
      SelectedItemsChanged="OnSelectedItemsChanged"
      Responsive="true">

    <GridColumns>
        <GridColumn TItem="SpecificProductOutputModel" HeaderText="Id" PropertyName="Id" SortKeySelector="item => item.Id">
            @context.Id
        </GridColumn>
        <GridColumn TItem="SpecificProductOutputModel" HeaderText="Название" PropertyName="Name" SortKeySelector="item => item.Name">
            @context.Name
        </GridColumn>
        <GridColumn TItem="SpecificProductOutputModel" HeaderText="Поставщик" PropertyName="Vendor" SortKeySelector="item => item.Vendor">
            @context.Vendor
        </GridColumn>
        <GridColumn TItem="SpecificProductOutputModel" HeaderText="Цена за штуку" PropertyName="Price" SortKeySelector="item => item.Price">
            @context.Price
        </GridColumn>
    </GridColumns>

</Grid>

<div class="row">
    <div class="col-md-14 text-center">
        <p>Количество выбранных товаров: @_selectedSpecificProducts.Count</p>
        <div class="mt-2">
            Выбранные товары:
            <ul>
                @foreach (var emp in _selectedSpecificProducts)
                {
                    <li>@emp.Name</li>
                }
            </ul>
        </div>
        <button type="button" class="btn btn-success" @onclick="Submit">Подтвердить</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Отменить</button>
    </div>
</div>


@code {

    [Parameter]
    public int restaurantId { get; set; }

    private List<SpecificProductOutputModel> _specificProducts = default!;

    private HashSet<SpecificProductOutputModel> _selectedSpecificProducts;

    private RestaurantAdminProductManager _restaurantProductManager;

    private LogisticianProductManager _logisticianProductManager;

    public SelectProductsForRestaurantMenuPage()
    {
        _restaurantProductManager = new();

        _logisticianProductManager = new();

        _selectedSpecificProducts = new();
    }

    private async Task<GridDataProviderResult<SpecificProductOutputModel>> ProductsDataProvider(GridDataProviderRequest<SpecificProductOutputModel> request)
    {
        if (_specificProducts is null)
            _specificProducts = await GetSpecificProducts();

        return await Task.FromResult(request.ApplyTo(_specificProducts));
    }

    private async Task<List<SpecificProductOutputModel>> GetSpecificProducts()
    {
        return await _logisticianProductManager.GetAllSpecificProducts();
    }

    private Task OnSelectedItemsChanged(HashSet<SpecificProductOutputModel> specificProducts)
    {
        _selectedSpecificProducts = specificProducts is not null && specificProducts.Any() ? specificProducts : new();
        return Task.CompletedTask;
    }

    private async Task Submit()
    {
        var productAmounts = new List<RestaurantSpecificProductAmountInputModel>();

        if (_selectedSpecificProducts.Count > 0)
        {
            foreach (var product in _selectedSpecificProducts)
            {
                var productAmount = new RestaurantSpecificProductAmountInputModel() { ProductAmount = 1, RestaurantId = restaurantId, SpecificProductId = product.Id };

                productAmounts.Add(productAmount);
            }
        }
        
        await _restaurantProductManager.AddSpecificProductsToRestaurant(productAmounts);
    }

    private void Cancel()
    {
        _selectedSpecificProducts.Clear();
    }
}